## ----------------------------------------- ##
## @lib: pip functions                       ##
## @author: Giuseppe Ricupero                ##
## @date: 2020-12-09 17.49                   ##
## @description:                             ##
## install / uninstall / update functions    ##
## related to the python pip package manager ##
## ----------------------------------------- ##


init() { # {{{
	# load package manager agnostic functions
	mandatory_import "${myLIB}/agnostic"

	# add pip executables to PATH
	is_not_empty PY_USER_BIN || {
		declare -gx PY_USER_BIN="$(python -c 'import site; print(site.USER_BASE + "/bin")')"
		append_line_if_needed 'export PY_USER_BIN="$(python -c '"'"'import site; print(site.USER_BASE + "/bin")'"'"')"' "${BASH_PATHS}"
	}
	already_in_variable PATH "${PY_USER_BIN}" || {
		eval "$(generate_export_string PATH PY_USER_BIN)"
		append_line_if_needed '[ -x "$(command -v python)" ] && [ -x "$(command -v pip)" ] && export PATH="${PY_USER_BIN}:${PATH}"' "${BASH_PATHS}"
	}
} # }}}

install() { # {{{
	local -a packages=(${@})
	for package in "${packages[@]}"; do
		pip install --user --upgrade "${package}"
		log_package "${package}"
	done
} # }}}

uninstall() { # {{{
	local -a packages=(${@})
	for package in "${packages[@]}"; do
		pip uninstall "${package}" -y
		unlog_package "${package}"
	done
} # }}}

update() { # {{{
	while read -r package; do
		slog -h2 "${package_manager} update ${package}"
		install "${package}"
	done < "${log_file}"
} # }}}

list() { # {{{
	while read -r package; do
		slog -h2 "${package_manager} show ${package}"
		pip show "${package}"
	done < "${log_file}"
} # }}}

init
# vim: ft=sh:fdm=marker
